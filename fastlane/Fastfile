setup_travis
update_fastlane
default_platform :ios

repository_name = "k3zi/MusicPlus"

def get_badge_version_string
  "#{get_version_number}-#{get_build_number}-blue"
end

def get_version_string
  "#{get_version_number}.#{get_build_number}"
end

lane :bump do |options|
  increment_build_number
end

lane :reg do |options|
  register_devices(
    devices: {
      options[:name] => options[:uuid]
    },
    username: options[:username]
  )
end

lane :ci do |options|
  if ENV['TRAVIS_BRANCH'] == 'master'
    beta
  elsif ENV['TRAVIS_BRANCH'] == 'store'
    store
  else
    beta
  end
end

lane :beta do |options|
  ensure_git_status_clean

  if ENV['GITHUB_USERNAME']
    writable_remote = "https://#{ENV['GITHUB_USERNAME']}:#{ENV['GITHUB_TOKEN']}@github.com/#{repository_name}.git"
    sh "git remote add http #{writable_remote}"
    sh 'git fetch http'
    sh "git checkout #{ENV['TRAVIS_BRANCH']}"
  end

  changelog = changelog_from_git_commits(
    pretty: '- (%ae) %s',
    merge_commit_filtering: "exclude_merges",
    tag_match_pattern: 'beta/*'
  )

  increment_build_number
  new_version = get_version_string
  tag_name = "beta/#{new_version}"

  add_badge(shield: "#{get_version_number}-#{get_build_number}-blue")

  if ENV['KEYCHAIN_PASSWORD']
    unlock_keychain(
      path: 'fastlane_tmp_keychain',
      password: ENV['KEYCHAIN_PASSWORD'],
      add_to_search_list: :replace
    )
  end

  unless options[:skip_testflight]
      match(
        type: 'appstore',
        keychain_password: ENV['KEYCHAIN_PASSWORD']
      )
      gym(
        clean: true,
        scheme: 'MusicPlus',
        configuration: 'Release',
        include_symbols: true,
        include_bitcode: true,
        export_method: 'app-store'
      )
      upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  reset_git_repo(force: true)
  increment_build_number

  commit_version_bump(message: "Bump version to: #{get_build_number} [skip ci]")
  add_git_tag(tag: tag_name)

  if ENV['GITHUB_USERNAME']
    push_to_git_remote(remote: 'http')
  else
    push_to_git_remote
  end

  set_github_release(
    repository_name: repository_name,
    api_token: ENV['GITHUB_TOKEN'],
    name: tag_name,
    tag_name: tag_name,
    commitish: "master",
    description: changelog,
    is_prerelease: true
  )
end

lane :store do
  ensure_git_status_clean

  if ENV['GITHUB_USERNAME']
    writable_remote = "https://#{ENV['GITHUB_USERNAME']}:#{ENV['GITHUB_TOKEN']}@github.com/#{repository_name}.git"
    sh "git remote add http #{writable_remote}"
    sh 'git fetch http'
    sh "git checkout #{ENV['TRAVIS_BRANCH']}"
  end

  changelog = changelog_from_git_commits(
    pretty: '- (%ae) %s',
    merge_commit_filtering: "exclude_merges",
    tag_match_pattern: 'store/*'
  )

  increment_build_number
  new_version = get_version_string
  tag_name = "store/#{new_version}"

  if ENV['KEYCHAIN_PASSWORD']
    unlock_keychain(
      path: 'fastlane_tmp_keychain',
      password: ENV['KEYCHAIN_PASSWORD'],
      add_to_search_list: :replace
    )
  end

  match(
    type: 'appstore',
    keychain_password: ENV['KEYCHAIN_PASSWORD']
  )
  gym(
    clean: true,
    scheme: 'MusicPlus',
    configuration: 'Release',
    include_symbols: true,
    include_bitcode: true,
    export_method: 'app-store'
  )

  upload_to_app_store(force: true, skip_screenshots: true, skip_metadata: true)

  reset_git_repo(force: true)
  increment_build_number

  commit_version_bump(message: "Bump version to: #{get_build_number} [skip ci]")
  add_git_tag(tag: tag_name)

  if ENV['GITHUB_USERNAME']
    push_to_git_remote(remote: 'http')
  else
    push_to_git_remote
  end

  set_github_release(
    repository_name: repository_name,
    api_token: ENV['GITHUB_TOKEN'],
    name: tag_name,
    tag_name: tag_name,
    commitish: "store",
    description: changelog,
    is_prerelease: false
  )
end
